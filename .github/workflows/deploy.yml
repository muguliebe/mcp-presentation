name: Deploy to GitHub Pages

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# GitHub Pages 배포를 위한 권한 설정
permissions:
  contents: read
  pages: write
  id-token: write

# 동시 배포 방지
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # 빌드 및 테스트 작업
  build:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: |
        npm ci || npm install
        
    - name: Lint code
      run: |
        # 프레젠테이션 파일의 기본 검증
        echo "Validating HTML structure..."
        if [ -f "index.html" ]; then
          echo "✓ index.html found"
        else
          echo "✗ index.html not found"
          exit 1
        fi
        
        echo "Validating CSS files..."
        if [ -f "assets/css/custom.css" ]; then
          echo "✓ custom.css found"
        else
          echo "✗ custom.css not found"
          exit 1
        fi
        
        echo "Validating JavaScript files..."
        if [ -f "assets/js/custom.js" ]; then
          echo "✓ custom.js found"
        else
          echo "✗ custom.js not found"
          exit 1
        fi
        
    - name: Validate presentation structure
      run: |
        echo "Validating presentation content..."
        
        # HTML 구조 검증
        if grep -q "reveal" index.html; then
          echo "✓ Reveal.js structure found"
        else
          echo "✗ Reveal.js structure not found"
          exit 1
        fi
        
        # 필수 섹션 확인
        if grep -q "MCP" index.html; then
          echo "✓ MCP content found"
        else
          echo "✗ MCP content not found"
          exit 1
        fi
        
        # Mermaid 다이어그램 확인
        if grep -q "mermaid" index.html; then
          echo "✓ Mermaid diagrams found"
        else
          echo "✗ Mermaid diagrams not found"
          exit 1
        fi
        
    - name: Test code samples
      run: |
        echo "Validating code samples..."
        
        # 코드 샘플 파일 존재 확인
        for file in code-samples/*.js; do
          if [ -f "$file" ]; then
            echo "✓ Found: $file"
            # 기본 JavaScript 문법 검증
            node -c "$file" && echo "✓ $file syntax valid" || echo "✗ $file has syntax errors"
          fi
        done
        
    - name: Setup Pages
      if: github.ref == 'refs/heads/main'
      uses: actions/configure-pages@v5
      
    - name: Build presentation
      run: |
        echo "Building presentation for GitHub Pages..."
        
        # 프로덕션용 설정
        echo "Optimizing assets..."
        
        # CSS 최소화 (기본적인 처리)
        if command -v cleancss >/dev/null 2>&1; then
          cleancss -o assets/css/custom.min.css assets/css/custom.css
          echo "✓ CSS minified"
        else
          cp assets/css/custom.css assets/css/custom.min.css
          echo "ℹ CSS copied (cleancss not available)"
        fi
        
        # 이미지 최적화 디렉터리 확인
        mkdir -p assets/images
        
        # QR 코드 생성 (프레젠테이션 URL용)
        echo "Generating QR code for presentation..."
        # 실제 배포 시에는 실제 URL로 대체
        PAGES_URL="https://${{ github.repository_owner }}.github.io/mcp-presentation"
        echo "QR Code will point to: $PAGES_URL"
        
        # 빌드 정보 파일 생성
        echo "{
          \"build_time\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",
          \"commit_hash\": \"${{ github.sha }}\",
          \"branch\": \"${{ github.ref_name }}\",
          \"pages_url\": \"$PAGES_URL\"
        }" > build-info.json
        
    - name: Upload Pages artifact
      if: github.ref == 'refs/heads/main'
      uses: actions/upload-pages-artifact@v3
      with:
        path: .

  # GitHub Pages 배포 작업
  deploy:
    if: github.ref == 'refs/heads/main'
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    needs: build
    
    steps:
    - name: Deploy to GitHub Pages
      id: deployment
      uses: actions/deploy-pages@v4
      
    - name: Comment PR with deployment info
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const deploymentUrl = '${{ steps.deployment.outputs.page_url }}';
          const body = `🚀 **Deployment successful!**
          
          Your presentation is now live at: ${deploymentUrl}
          
          📱 **Mobile Access**: The presentation is optimized for iPad and mobile devices.
          🔗 **QR Code**: Available on the title slide for easy access.
          
          **Features included:**
          - ✅ Reveal.js presentation framework
          - ✅ Mermaid diagrams for architecture
          - ✅ Syntax-highlighted code samples
          - ✅ Mobile-friendly design
          - ✅ Interactive navigation
          
          **Sections:**
          1. 🎯 Hook: AI automatic error solutions
          2. 📖 MCP Introduction (5 min)
          3. 🏗️ Project Architecture (10 min)  
          4. 🎬 Live Demo (10 min)
          5. ⚙️ Technical Implementation (10 min)
          6. ❓ Q&A (5 min)`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: body
          });

  # 코드 품질 검사
  quality-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install quality tools
      run: |
        npm install -g htmlhint jshint markdownlint-cli
        
    - name: Check HTML quality
      run: |
        echo "Checking HTML quality..."
        htmlhint index.html || echo "HTML hints completed"
        
    - name: Check JavaScript quality  
      run: |
        echo "Checking JavaScript quality..."
        for file in assets/js/*.js code-samples/*.js; do
          if [ -f "$file" ]; then
            echo "Checking: $file"
            jshint "$file" || echo "JSHint completed for $file"
          fi
        done
        
    - name: Check Markdown quality
      run: |
        echo "Checking Markdown quality..."
        if [ -f "README.md" ]; then
          markdownlint README.md || echo "Markdown lint completed"
        fi
        
        if [ -f "diagrams/architecture-flow.md" ]; then
          markdownlint diagrams/architecture-flow.md || echo "Markdown lint completed"
        fi
        
    - name: Accessibility check
      run: |
        echo "Basic accessibility checks..."
        
        # alt 태그 확인
        if grep -n "<img" index.html | grep -v "alt="; then
          echo "⚠️ Images without alt attributes found"
        else
          echo "✓ All images have alt attributes"
        fi
        
        # 제목 구조 확인
        if grep -q "<h1>" index.html && grep -q "<h2>" index.html; then
          echo "✓ Proper heading structure found"
        else
          echo "⚠️ Check heading structure"
        fi
        
    - name: Performance hints
      run: |
        echo "Performance optimization hints..."
        
        # 이미지 크기 확인
        if [ -d "assets/images" ]; then
          find assets/images -name "*.png" -o -name "*.jpg" -o -name "*.jpeg" | while read img; do
            size=$(stat -f%z "$img" 2>/dev/null || stat -c%s "$img" 2>/dev/null || echo "0")
            if [ "$size" -gt 1048576 ]; then # 1MB
              echo "⚠️ Large image detected: $img ($size bytes)"
            fi
          done
        fi
        
        # CSS/JS 파일 크기 확인
        for file in assets/css/*.css assets/js/*.js; do
          if [ -f "$file" ]; then
            size=$(stat -f%z "$file" 2>/dev/null || stat -c%s "$file" 2>/dev/null || echo "0")
            if [ "$size" -gt 102400 ]; then # 100KB
              echo "⚠️ Large asset file: $file ($size bytes)"
            fi
          fi
        done

  # 보안 검사
  security-check:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      
    - name: Security scan
      run: |
        echo "Running security checks..."
        
        # 민감한 정보 확인
        echo "Checking for sensitive information..."
        
        # API 키 패턴 검사
        if grep -r -E "(api[_-]?key|secret|password|token)" --include="*.js" --include="*.html" --include="*.css" . | grep -v "example\|placeholder\|demo"; then
          echo "⚠️ Potential sensitive information found"
        else
          echo "✓ No sensitive information detected"
        fi
        
        # 하드코딩된 URL 확인
        if grep -r -E "http://localhost|127\.0\.0\.1" --include="*.js" --include="*.html" . | grep -v "comment\|example"; then
          echo "⚠️ Localhost URLs found in code"
        else
          echo "✓ No localhost URLs in production code"
        fi
        
        # 악성 스크립트 패턴 확인
        if grep -r -E "(eval\s*\(|document\.write|innerHTML\s*=)" --include="*.js" . | grep -v "comment\|//"; then
          echo "⚠️ Potentially unsafe JavaScript patterns found"
        else
          echo "✓ No unsafe JavaScript patterns detected"
        fi
        
    - name: Dependency security check
      run: |
        if [ -f "package.json" ]; then
          echo "Checking npm dependencies..."
          npm audit || echo "npm audit completed"
        else
          echo "No package.json found, skipping dependency check"
        fi